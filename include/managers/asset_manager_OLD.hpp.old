#ifndef SENGINE_ASSET_MANAGER_H
#define SENGINE_ASSET_MANAGER_H

#include <memory>
#include <filesystem>
#include <utility>
#include <unordered_map>
#include <typeindex>
#include <typeinfo>
#include <crossguid/guid.hpp>

#include "managers/manager.hpp"
#include "core/log.hpp"
#include "structs/assets/asset_type.hpp"
#include "assets/asset.hpp"
#include "assets/font.hpp"
#include "assets/material.hpp"
#include "assets/model.hpp"
#include "assets/shader.hpp"
#include "assets/sound.hpp"
#include "assets/texture.hpp"

namespace managers {
    const std::string ASSET_DEFAULT_NAME = ".default";
    const std::string ASSET_FILE_PREFIX = "resources/assets/";
    const std::string ASSET_FILE_SUFFIX = ".asset";

    const std::string DEFAULT_ASSET_NAME = ".default";

    const std::unordered_map<std::type_index, std::string> ASSET_FOLDER_NAMES = {
            { typeid(assets::Font), "font" },
            { typeid(assets::Material), "material" },
            { typeid(assets::Model), "model" },
            { typeid(assets::Shader), "shader" },
            { typeid(assets::Sound), "sound" },
            { typeid(assets::Texture), "texture" }
    };



    class AssetManager_OLD : public Manager {
    public:
        AssetManager_old();
        ~AssetManager_OLD();

        static std::string GetAssetPathRaw(const std::string &folderName, const std::string &assetName);

        std::weak_ptr<assets::Asset> GetAssetRaw(const std::string &assetPath);
        void GetAssetNames(const structs::AssetType &assetType, std::vector<std::string> *outNames);

        void UnLoadAsset(const std::weak_ptr<assets::Asset> &asset);
        void UnLoadAsset(const xg::Guid &guid);

        std::weak_ptr<assets::Asset> GetAssetByGuidRaw(xg::Guid guid);

        template<typename T>
        std::weak_ptr<T> GetAssetByGuid(const xg::Guid &guid);

        template<typename T>
        structs::AssetType GetAssetType();

        template<typename T>
        std::weak_ptr<T> LoadAsset(const std::string &assetName, bool loadDefaultIfFailed = true);

        template<typename T>
        std::weak_ptr<T> GetAsset(const std::string &assetName);

        template<typename T>
        bool AssetExists(const std::string &assetName);

        template<typename T>
        std::weak_ptr<T> GetDefaultAsset();

        template<typename T>
        std::string GetAssetPath(const std::string &assetName);
    private:
        std::unordered_map<xg::Guid, std::shared_ptr<assets::Asset>> assetMap;
        std::unordered_map<xg::Guid, std::string> assetNameMap;
        std::unordered_map<xg::Guid, std::string> assetPathMap;

        std::shared_ptr<assets::Asset> GetSharedAssetRaw(const xg::Guid &assetPath);
        std::shared_ptr<assets::Asset> GetSharedAssetRaw(const std::string &assetPath);
        void RegisterAsset(const std::string &assetPath, const std::shared_ptr<assets::Asset> &asset);
        void UnRegisterAsset(const std::shared_ptr<assets::Asset> &asset);
    };
}

#include "asset_manager_OLD.tpp"
#endif //SENGINE_ASSET_MANAGER_H
