#ifndef SENGINE_ASSET_MANAGER_TPP
#define SENGINE_ASSET_MANAGER_TPP

#include asset_manager_OLD.hpp

namespace managers {
    template<typename T>
    structs::AssetType AssetManager::GetAssetType() {
        auto find = ASSET_ASSET_TYPES.find(typeid(T));
        if (find == ASSET_ASSET_TYPES.end()) core::Log::Error("asset type for typeid \"{}\" doesn't exist", typeid(T).name());

        return find->second;
    }

    template<typename T>
    std::weak_ptr<T> AssetManager::LoadAsset(const std::string &assetName, bool loadDefaultIfFailed) {
        std::string assetPath = GetAssetPath<T>(assetName);
        core::Log::Info("loading asset {}", assetPath);

        std::shared_ptr<T> sharedAsset;
        try {
            sharedAsset = std::static_pointer_cast<T>(GetSharedAssetRaw(assetPath));
            if ((std::filesystem::exists(assetPath)) && (sharedAsset == nullptr)) {
                sharedAsset = std::make_shared<T>();
                sharedAsset->Load(assetPath);
                RegisterAsset(assetPath, sharedAsset);
            }
        }
        catch(const std::exception &e) {
            core::Log::Warn("an error occured when trying to get asset ", assetName, ":", e.what());
            sharedAsset = nullptr;
        }

        std::weak_ptr<T> weakAsset = std::weak_ptr<T>();
        if ((sharedAsset == nullptr) && (loadDefaultIfFailed)) {
            core::Log::Warn("asset \"{}\" not found, using default", assetPath);

            const std::string defaultAssetPath = GetAssetPath<T>(ASSET_DEFAULT_NAME);
            if (!std::filesystem::exists(defaultAssetPath)) core::Log::Error("missing default asset \"{}\"", defaultAssetPath);

            weakAsset = LoadAsset<T>(ASSET_DEFAULT_NAME, false);
        } else {
            weakAsset = GetAsset<T>(assetName);
        }

        return weakAsset;
    }

    template<typename T>
    std::weak_ptr<T> AssetManager::GetAsset(const std::string &assetName) {
        const std::string assetPath = GetAssetPath<T>(assetName);
        std::shared_ptr<assets::Asset> asset = GetSharedAssetRaw(assetPath);
        return ((asset == nullptr) ? std::weak_ptr<T>() : std::weak_ptr<T>(std::static_pointer_cast<T>(asset)));
    }

    template<typename T>
    std::weak_ptr<T> AssetManager::GetAssetByGuid(const xg::Guid &guid) {
        auto find = assetGuidMap.find(guid);
        return ((find == assetGuidMap.end()) ? std::weak_ptr<T>() : find->second);
    }

    template<typename T>
    bool AssetManager::AssetExists(const std::string &assetName) {
        std::weak_ptr<T> asset = GetAsset<T>(assetName);
        return (!asset.expired());
    }

    template<typename T>
    std::weak_ptr<T> AssetManager::GetDefaultAsset() {
        return LoadAsset<T>(DEFAULT_ASSET_NAME, false);
    }

    template<typename T>
    std::string AssetManager::GetAssetPath(const std::string &assetName) {
        auto find = ASSET_FOLDER_NAMES.find(typeid(T));
        if (find == ASSET_FOLDER_NAMES.end()) core::Log::Error("asset folder name for \"{}\" doesn't exist", assetName);

        std::string folderName = find->second;
        return GetAssetPathRaw(folderName, assetName);
    }
}

#endif //SENGINE_ASSET_MANAGER_TPP