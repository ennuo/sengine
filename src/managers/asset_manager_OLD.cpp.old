#include "utils/string_util.hpp"
#include "managers/asset_manager_OLD.hpp.old"

namespace managers {
    AssetManager::AssetManager() : assetMap(), assetNameMap() {
        //GetDefaultAsset<assets::Font>();
        //GetDefaultAsset<assets::Material>();
        //GetDefaultAsset<assets::Model>();
        GetDefaultAsset<assets::Shader>();
        //GetDefaultAsset<assets::Sound>();
        GetDefaultAsset<assets::Texture>();
    }

    AssetManager::~AssetManager() = default;


    void AssetManager::GetAssetNames(const structs::AssetType &assetType, std::vector<std::string> *outNames) {
        std::unordered_map<xg::Guid, std::string>::iterator iterator;
        for (iterator = assetNameMap.begin(); iterator != assetNameMap.end(); ++iterator) {
            xg::Guid guid = iterator->first;
            std::weak_ptr<assets::Asset> asset = GetAssetByGuid(guid);

            structs::AssetInfo assetInfo = asset->GetAssetInfo();
            if (assetType != assetInfo.assetType) continue;

            std::string name = iterator->first;
            outNames->push_back(name);
        }

        std::sort(outNames->begin(), outNames->end(), utils::CompareStrings);
    }

    void AssetManager::UnLoadAsset(const std::string &assetPath) {
        auto find = assetMap.find(assetPath);
        if (find == assetMap.end()) return;

        std::shared_ptr<assets::Asset> asset = find->second;
        asset.reset();

        assetMap.erase(find);
    }

    std::weak_ptr<assets::Asset> AssetManager::GetAssetRaw(const std::string &assetPath) {
        std::shared_ptr<assets::Asset> asset = GetSharedAssetRaw(assetPath);
        return ((asset == nullptr) ? std::weak_ptr<assets::Asset>() : std::weak_ptr<assets::Asset>(asset));
    }

    std::shared_ptr<assets::Asset> AssetManager::GetSharedAssetRaw(const std::string &assetPath) {
        auto find = assetMap.find(assetPath);
        return ((find == assetMap.end()) ? nullptr : find->second);
    }

    std::string AssetManager::GetAssetPathRaw(const std::string &folderName, const std::string &assetName) {
        return (ASSET_FILE_PREFIX + folderName + "/" + assetName + ASSET_FILE_SUFFIX);
    }

    void AssetManager::RegisterAsset(const std::string &assetPath, const std::shared_ptr<assets::Asset> &asset) {
        assetMap.insert({ assetPath, asset });

        structs::AssetInfo assetInfo = asset->GetAssetInfo();
        assetGuidMap.insert({assetInfo.GetGuid(), std::weak_ptr<assets::Asset>(asset)});
    }

    void AssetManager::UnRegisterAsset(const std::shared_ptr<assets::Asset> &asset) {
        auto assetMapFind = assetMap.find()
        if ()
        assetMap.insert({ assetPath, asset });

        structs::AssetInfo assetInfo = asset->GetAssetInfo();
        assetGuidMap.insert({assetInfo.GetGuid(), std::weak_ptr<assets::Asset>(asset)});
    }
}